name: Release

on:
  pull_request:
  workflow_dispatch:
    inputs:
      cache:
        description: Whether to use cache for faster builds
        default: false
        type: boolean
      artifact-prefix:
        description: Charm packages are uploaded to GitHub artifacts beginning with this prefix
        default: packed-charm
        type: string
      path-to-charm-directory:
        description: Relative path to charm directory from repository directory
        default: ./build
        type: string
      charmcraft-snap-revision:
        description: charmcraft snap revision
        required: false
        type: string
      charmcraft-snap-channel:
        description: |
          charmcraft snap channel

          Cannot be used if `charmcraft-snap-revision` input is passed
        required: false
        type: string
      lxd-snap-revision:
        description: |
          LXD snap revision

          LXD from base runner image will be used if neither `lxd-snap-revision` or `lxd-snap-channel` is passed
        required: false
        type: string
      lxd-snap-channel:
        description: |
          LXD snap channel

          Cannot be used if `lxd-snap-revision` input is passed

          LXD from base runner image will be used if neither `lxd-snap-revision` or `lxd-snap-channel` is passed
        required: false
        type: string


jobs:
  collect-platforms:
    name: Collect platforms for charm | ${{ inputs.path-to-charm-directory }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Install CLI
        run: pipx install git+https://github.com/canonical/data-platform-workflows@'29.3.0-rc.1'#subdirectory=python/cli
      - name: Checkout
        uses: actions/checkout@v4
      - name: Collect charm platforms to build from charmcraft.yaml
        id: collect
        run: collect-charm-platforms --directory=.
    outputs:
      platforms: ${{ steps.collect.outputs.platforms }}

  build-and-release:
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJSON(needs.collect-platforms.outputs.platforms) }}
        build-args:
          - plugin-url: https://github.com/Aiven-Open/jdbc-connector-for-apache-kafka/releases/download/v6.10.0/jdbc-connector-for-apache-kafka-6.10.0.tar
            name: mysql-connect-integrator
            substrate: vm
            data-interface: mysql_client
            impl: mysql
          - plugin-url: https://github.com/Aiven-Open/jdbc-connector-for-apache-kafka/releases/download/v6.10.0/jdbc-connector-for-apache-kafka-6.10.0.tar
            name: mysql-connect-k8s-integrator
            substrate: k8s
            data-interface: mysql_client
            impl: mysql

    name: '${{ matrix.build-args.name }} - ${{ matrix.platform.name }}'
    needs:
      - collect-platforms
    runs-on: ${{ matrix.platform.runner }}
    timeout-minutes: 120
    steps:
      - name: Install CLI
        run: pipx install git+https://github.com/canonical/data-platform-workflows@'29.3.0-rc.1'#subdirectory=python/cli
      - name: Parse charmcraft version inputs
        id: charmcraft-snap-version
        run: parse-snap-version --revision='${{ inputs.charmcraft-snap-revision }}' --channel='${{ inputs.charmcraft-snap-channel }}' --revision-input-name=charmcraft-snap-revision --channel-input-name=charmcraft-snap-channel
      - name: Parse LXD version inputs
        id: lxd-snap-version
        run: parse-snap-version --revision='${{ inputs.lxd-snap-revision }}' --channel='${{ inputs.lxd-snap-channel }}' --revision-input-name=lxd-snap-revision --channel-input-name=lxd-snap-channel
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up environment
        run: |
          sudo snap install lxd ${{ steps.lxd-snap-version.outputs.install_flag }}
          # shellcheck disable=SC2078
          # (shellcheck sees it as constant, but GitHub Actions expression is not constant between workflow runs)
          if [[ '${{ steps.lxd-snap-version.outputs.install_flag }}' ]]
          then
            sudo snap refresh lxd ${{ steps.lxd-snap-version.outputs.install_flag }}
          fi
          sudo adduser "$USER" lxd
          # `newgrp` does not work in GitHub Actions; use `sudo --user` instead
          sudo --user "$USER" --preserve-env --preserve-env=PATH -- env -- lxd waitready
          sudo --user "$USER" --preserve-env --preserve-env=PATH -- env -- lxd init --auto
          # Workaround for Docker & LXD on same machine
          sudo iptables -F FORWARD
          sudo iptables -P FORWARD ACCEPT

          sudo snap install charmcraft --classic ${{ steps.charmcraft-snap-version.outputs.install_flag }}
          pipx install charmcraftcache
      - run: snap list
      - name: Install tox & poetry
        run: |
          pipx install tox
          pipx install poetry
      - name: Make
        run: |
          make build \
            NAME=${{ matrix.build-args.name }} \
            BUILD_DIRECTORY=build \
            IMPL=${{ matrix.build-args.impl }} \
            DATA_INTERFACE=${{ matrix.build-args.data-interface }} \
            SUBSTRATE=${{ matrix.build-args.substrate }}
      - name: Pack charm
        id: pack
        run: |
          cd build
          ls -lh
          if '${{ inputs.cache }}'
          then
            sudo --user "$USER" --preserve-env --preserve-env=PATH -- env -- charmcraftcache pack -v --platform='${{ matrix.platform.name }}'
          else
            sudo --user "$USER" --preserve-env --preserve-env=PATH -- env -- charmcraft pack -v --platform='${{ matrix.platform.name }}'
          fi
        env:
          # Used by charmcraftcache (to avoid GitHub API rate limit)
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Charmcraft logs
        if: ${{ success() || (failure() && steps.pack.outcome == 'failure') }}
        run: cat ~/.local/state/charmcraft/log/*
      - run: touch .empty
      - name: Compute path in artifact
        id: path-in-artifact
        run: compute-path-in-artifact ./build/
      - name: Upload charm package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-prefix }}-${{ steps.path-in-artifact.outputs.path }}--platform-${{ matrix.platform.name_in_artifact }}
          # .empty file required to preserve directory structure
          # See https://github.com/actions/upload-artifact/issues/344#issuecomment-1379232156
          path: |
            build/*.charm
            .empty
          if-no-files-found: error
      - name: Download plugin
        run: wget ${{ matrix.build-args.plugin-url }} -O build/plugin.tar
      - name: Register
        run: charmcraft register ${{ matrix.build-args.name }}
        continue-on-error: true
        env:
          CHARMCRAFT_AUTH: ${{ secrets.CHARMHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload & release charm
        id: release
        run: |
          cd build
          ls -lh
          release-charm --directory=. --channel=latest/edge --create-tags=false --file-resource=./plugin.tar
        env:
          CHARMCRAFT_AUTH: ${{ secrets.CHARMHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Charmcraft logs
        if: ${{ success() || (failure() && steps.release.outcome == 'failure') }}
        run: cat ~/.local/state/charmcraft/log/*
