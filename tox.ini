# Copyright 2025 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = lint, unit

[vars]
application = template-connect-integrator
src_path = {tox_root}/src
tests_path = {tox_root}/tests
rest_path = {tox_root}/src/rest
examples_path = {tox_root}/examples
all_path = {[vars]src_path} {[vars]tests_path} {[vars]examples_path}

[testenv]
allowlist_externals =
    /bin/bash
    poetry
    cp
    mkdir
    make
set_env =
    PYTHONPATH = {tox_root}/lib:{[vars]src_path}:{[vars]rest_path}
    PYTHONBREAKPOINT=ipdb.set_trace
    PY_COLORS=1
    mysql: TEST_FILE=test_mysql.py 
    mysql: IMPL=examples.mysql 
    mysql: DATA_INTERFACE=mysql_client
    opensearch: TEST_FILE=test_opensearch.py 
    opensearch: IMPL=examples.opensearch
    opensearch: DATA_INTERFACE=opensearch_client
    postgresql: TEST_FILE=test_postgresql.py
    postgresql: IMPL=examples.postgresql
    postgresql: DATA_INTERFACE=postgresql_client
    s3: TEST_FILE=test_s3.py
    s3: IMPL=examples.s3
    s3: DATA_INTERFACE=s3

pass_env =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS
deps =
    poetry

[testenv:format]
description = Apply coding style standards to code
commands =
    poetry install --only fmt
    poetry run ruff check --fix {[vars]all_path}
    poetry run black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
commands =
    poetry install --only lint
    poetry run codespell {tox_root} \
        --skip {tox_root}/.git \
        --skip {tox_root}/.tox \
        --skip {tox_root}/build \
        --skip {tox_root}/docs \
        --skip {tox_root}/lib \
        --skip {tox_root}/venv \
        --skip {tox_root}/.mypy_cache \
        --skip {tox_root}/icon.svg \
        --skip {tox_root}/poetry.lock
    poetry run codespell {[vars]lib_path}

    poetry run ruff check {[vars]all_path}
    poetry run black --check --diff {[vars]all_path}

    poetry install --with lint
    poetry run pyright

[testenv:unit]
description = Run unit tests
commands =
    poetry install --with unit
    poetry run coverage run --source={[vars]src_path} \
        -m pytest -vv --tb native -s {posargs} {[vars]tests_path}/unit
    poetry run coverage report


[testenv:integration-{mysql,opensearch,postgresql,s3}]
description = Run integration tests
pass_env =
    {[testenv]pass_env}
    CI
    S3_ACCESS_KEY
    S3_SECRET_KEY
    S3_HOST
    S3_BUCKET
commands =
    make build IMPL={env:IMPL} DATA_INTERFACE={env:DATA_INTERFACE}
    poetry install --with integration
    poetry run pytest -vv --tb native --log-cli-level=INFO -s {posargs} {[vars]tests_path}/integration/{env:TEST_FILE}


[testenv:render]
description = Render charm from template
pass_env =
    PYTHONPATH
    BUILD_DIRECTORY
    NAME
    DATA_INTERFACE
    IMPL
commands =
    poetry install --with render
    cp charmcraft.yaml {env:BUILD_DIRECTORY}
    cp pyproject.toml {env:BUILD_DIRECTORY}
    cp LICENSE {env:BUILD_DIRECTORY}
    cp -R src/ {env:BUILD_DIRECTORY}/src/
    cp -R lib/ {env:BUILD_DIRECTORY}/lib/
    poetry run python3 render_config.py --impl {env:IMPL} {env:BUILD_DIRECTORY}
    poetry run jinja2 -D name={env:NAME} -D data_interface={env:DATA_INTERFACE} ./metadata.yaml.j2 -o {env:BUILD_DIRECTORY}/metadata.yaml
